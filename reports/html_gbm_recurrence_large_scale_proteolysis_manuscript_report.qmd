---
title: "GBM recurrence - Shot gun analysis of proteolytic products"
author: "Miguel Cosenza-Contreras"
format:
  html: 
    toc-depth: 4 # default is 3
    toc-title: Contents
    toc-location: left # default is right, option is 'body'
    number-sections: true
    number-depth: 3
    embed-resources: true
always_allow_html: true
editor: source
---
```{r knirt_helper_funcs}
knitr::opts_chunk$set(echo = TRUE, 
                      message = FALSE, 
                      warning = FALSE)

source(here::here("scr/helper_functions.R"))
```

```{r load_packages}
## Required packages ----
library(tidyverse)
library(mixOmics)
library(fs)
library(kableExtra)
library(sva)
library(limma)
library(naniar)
library(missForest)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
library(DT)
library(here)
library(janitor)
library(drawProteins)
library(seqinr)
library(ggpubr)
library(ggrepel)
library(extrafont)
extrafont::loadfonts(device = "win")
```

```{r theme_set}
theme_set(theme(axis.text.x = element_text(hjust = 0.5, 
                                           vjust = 0, 
                                           size = 6, 
                                           angle = 360),
                axis.text.y = element_text(hjust = 0.5, 
                                           vjust = 0, 
                                           size = 6),
                panel.background = element_blank(),
                panel.grid.major = element_line(color = "grey"),
                panel.border = element_rect(colour = "black", 
                                            fill = NA, 
                                            size = 1.5),
                axis.title=element_text(size = 8),
                legend.title = element_text(size = 8),
                legend.key.height = unit(3, 'mm'),
                legend.key.width = unit(3, 'mm'),
                legend.position = "bottom",
                text = element_text(family = "Helvetica")))
```

The following report holds the code, results and interpretation of the proteomics data analysis of Initial-Recurrent glioblastoma (GBM) samples of matched patients.

# Sample annotation info  

```{r echo=TRUE}
sample_annotation <- read_csv(here("data/sample_annotation.csv"))

# correct annotation

sample_annotation2 <- sample_annotation %>%
  mutate(patient = paste("x",
                         patient,
                         sep = ""),
         recurrence = case_when(recurrence == "initial" ~ "prim",
                                recurrence == "recurrent" ~ "rec",
                                TRUE ~ recurrence)) %>%
  mutate(paired_id = paste(patient, 
                           recurrence, 
                           sep = "_")) %>%
  filter(recurrence %in% c("prim", 
                           "rec"))

sample_annotationwo6 <- sample_annotation2 %>%
  filter(patient != "x6")
```

## Sample annotation
  
### Brief note on sample annotation: {.unnumbered .unlisted}

Twenty-two patient matched samples (corresponding to 11 patients) were processed for protein extraction, TMT-labelled and submitted via high-pH fractionation and further analyzed via LC-MS/MS. 

```{r echo=FALSE, error=TRUE}
kbl(sample_annotation, booktabs = TRUE) %>%
  kable_styling(font_size = 14, 
                bootstrap_options = c("striped", 
                                      "hover"))
```

# Brief note on data analysis and processing:

Three proteomics data analysis approaches were used to explore the spectral data and will be briefly described:

1. General large scale proteomics.
2. Proteolytic processing.
3. Proteogenomics

The FragPipe bioinformatic pipeline was used for each of these approaches with varying parameters depending on the type of explorative approach.

**This report holds the code, analysis, visualizations and results for large scale analysis of proteolytic processing.**

__1. General large scale proteomics analyses__ : In order to explore the differential abundance of proteins between Recurrent and Initial tumor, a fully-tryptic search was performed against the EBI Human canonical proteome (version 2021_03), appended with common contaminants and iRT peptides. A minimum percentage of  %5 of the total summed reporter ion intensities were required to consider a peptide and reporter ion for quantitation.

__2. Proteolytic processing__: The large scale evaluation of differential proteolytic activity between recurrent vs primary tumor was executed via a semi-tryptic search against the EBI Human canonical proteome (version 2021_03), appended with common contaminants and iRT peptides.  A minimum percentage of  %5 of the total summed reporter ion intensities were required to consider a peptide and reporter ion for quantitation.

__3. Proteogenomics__: The explorative proteogenomics analysis started with the generation of a GBM-specific database from publicly available RNA-seq sequencing data from tumor specimens. Fastq files were obtain from the SRA BioProject PRJNA627121 (Cell Rep, 2021 Mar 2;34(9):108787). Eight samples containing paired reads were selected, based on: 1) the higher number of reads per file; 2) having a similar proportion of males and females and 3) not bearing isocitrate-dehyderogenase (IDH)-1 mutation (IDH WT). None of these patients undergo previous treatment, therefore potential variants in the sequencing data are not expected to be associated to treatment-related mutagenic processes. Spectral data was then searched against this custom database using a fully-tryptic approac. No minimum intensity threshold was set for reporter ion intensity for quantitation.

Exceptionally when stated differently within each sub-approach described above, all these searches were executed using the following parameters: MSFragger was used as a search engine, setting a fully or semi-tryptic specificity allowing for 1 missed cleavages. Precursor mass tolerance was set to -20/20 and fragment mass tolerance of 20 ppm with mass calibration and parameter optimization resulting in 5 ppm. Peptide N-terminal acetylation and peptide N-terminal TMT labeling were set as variable modifications. TMT labelling at K and carbamidomethylation of C were set as fixed modifications. MSBooster was used for deep-learning based predictions of retention time and spectra. Predicted features were used by Percolator for post-processing scoring and false discovery rate (FDR) control via target-decoy competition of all peptide-to-spectrum matches (PSMs) obtained from MSFragger search. ProteinProphet was used as a protein inference algorithm keeping all PSMs with probability score bigger than 0.9. Final report and FDR estimation was based on the filtered PSM and protein lists before protein scoring.

Relative quantitation of identified peptides within each sample was performed via their reported ion intensities using TMT-integrator. Only PSMs coming from unique peptides with a minimum probability of 0.9 and an isotopic purity of at least 50% were considered for quantitation. Quantitative values were normalized via median centering and summarized by protein/gene and peptide using a virtual reference channel, to finally generate protein and peptide normalized abundance matrices of abundance used for further statistical processing in combination with the sample annotation.  

# Initial data loading and wrangling {.unnumbered .unlisted}

```{r}
# semi-specific search
tmt_peptdata_frag <- read_tsv(here("data/semi_specific_search_fragpipe17/tmt-report/abundance_peptide_MD.tsv")) %>% 
  janitor::clean_names()


pept_ids_mix1 <- read_delim(here("data/semi_specific_search_fragpipe17/mix_1/peptide.tsv")) %>%
                    clean_names() %>%
          dplyr::select(-c(starts_with("empty")))

pept_ids_mix2 <- read_delim(here("data/semi_specific_search_fragpipe17/mix_2/peptide.tsv")) %>%
                    clean_names() %>%
          dplyr::select(-c(starts_with("x"), 
                           starts_with("empty"), 
                           "master"))

pept_ids_mix3 <- read_delim(here("data/semi_specific_search_fragpipe17/mix_3/peptide.tsv")) %>%
                    clean_names() %>%
          dplyr::select(-c(starts_with("x"), 
                           starts_with("empty"), 
                           "master"))

identified_proteins_semi <- read_tsv(here("data/semi_specific_search_fragpipe17/combined_protein.tsv")) %>% 
  janitor::clean_names()

#specific search
# tmt-integrator output loading 
tmt_protdata_frag <- read_tsv(here("data/specific_search_fragpipe17/specific_no_ptms_2/tmt-report/abundance_protein_MD.tsv")) %>% 
  janitor::clean_names()

identified_proteins <- read_tsv(here("data/specific_search_fragpipe17/specific_no_ptms_2/combined_protein.tsv")) %>% 
  janitor::clean_names()

identified_peptides <- read_tsv(here("data/specific_search_fragpipe17/specific_no_ptms_2/combined_peptide.tsv")) %>%
  janitor::clean_names()

```

```{r}
prot2gene <- identified_proteins_semi %>%
  dplyr::select(Protein = protein_id, Gene = gene,
                Description = description)


```

```{r}
# wide expression matrix with NAs
pept_matrix <- dplyr::select(tmt_peptdata_frag,
                             index, 
                             starts_with("x"))

pept_long_mat <- pivot_longer(pept_matrix,
                         cols = starts_with("x"),
                         names_to = c("patient"),
                         values_to = "Abundance") %>%
  mutate(recurrence = str_extract(patient, "[^0-9]+$")) %>%
  mutate(patient = str_remove_all(patient, "[^0-9]+$"))

pept_long_mat_2 <- pept_long_mat %>%
  mutate(paired_id_semi = paste(patient, 
                                recurrence, 
                                sep = "_"))

sample_annotation2 <- sample_annotation2 %>%
  mutate(paired_id_semi = paste(patient, 
                                recurrence, 
                                sep = "_"))

## Annotated abundance data in long format ----

pept_quant_annotated <- left_join(pept_long_mat_2,
                             sample_annotation2, 
                             by = c("paired_id_semi", 
                                    "patient",
                                    "recurrence")) %>%
  mutate(Channel_mix = paste(mixture,
                             channel,  
                             sep = "_"))

## Wide xpression matrices without NAs
pept_expr_matnona <- column_to_rownames(pept_matrix,
                                        "index") %>%
          as.matrix() %>%
          na.omit()
```

```{r}
# wide expression matrix with NAs
expr_matrix <- dplyr::select(tmt_protdata_frag,
                             Protein = index, starts_with("x"))

long_mat <- pivot_longer(expr_matrix,
                         cols = starts_with("x"),
                         names_sep = "_",
                         names_to = c("patient", "recurrence"),
                         values_to = "Abundance")

long_mat_2 <- long_mat %>%
  mutate(paired_id = paste(patient, recurrence, sep = "_"))

paired_annot_uniq <- long_mat_2 %>%
  dplyr::select(patient, recurrence, paired_id) %>%
  distinct()

# correct annotation

sample_annotation2 <- sample_annotation %>%
  mutate(patient = paste("x",patient, sep = ""),
         recurrence = case_when(recurrence == "initial" ~ "prim",
                                recurrence == "recurrent" ~ "rec",
                                TRUE ~ recurrence)) %>%
  mutate(paired_id = paste(patient, recurrence, sep = "_")) %>%
  filter(recurrence %in% c("prim", "rec"))

## Annotated abundance data in long format ----

quant_annotated <- left_join(long_mat_2,
                             sample_annotation2, 
                             by = c("paired_id", "patient","recurrence")) %>%
  mutate(Channel_mix = paste(mixture,channel,  sep = "_"))

## Wide xpression matrices without NAs
expr_matnona <- column_to_rownames(expr_matrix,
                            "Protein") %>%
          as.matrix() %>%
          na.omit()
```

Wrangle and merge peptide ids for further annotation based on they proteolytic specificity

```{r}
peptide_joined1 <- full_join(pept_ids_mix1, 
                             pept_ids_mix2) %>%
                    mutate(duplicated = duplicated(peptide))

peptide_joined <- full_join(peptide_joined1, 
                            pept_ids_mix3) %>%
                    mutate(duplicated = duplicated(peptide))


peptide_ids_filtered <- filter(peptide_joined,
                               peptide %in% peptide_joined$peptide) %>%
                    distinct(peptide,
                             assigned_modifications,
                             observed_modifications, 
                             .keep_all = TRUE) %>%
                    dplyr::rename(Peptide = peptide) %>%
                    dplyr::mutate(Genes = protein_id)
```

# Sparcity reduction  

Only peptides that were identified and quantified in all 3 mixtures would be used for further inferential analyses for proteolytic processing.

```{r}
pept_matrix_nona <- pept_matrix %>% 
  na.omit()

pept_nona <- pept_matrix_nona %>%
  dplyr::select(index) %>%
  separate(col = index, 
           sep = "_", 
           into = c("protein", 
                    "peptide"))

pept_matrix_nonawop6 <- pept_matrix %>% 
  dplyr::select(-starts_with("x6")) %>%
  na.omit()

```

# Coverage information

```{r}
ids_summarypep <- pept_quant_annotated %>% 
  dplyr::select(index, 
                mixture, 
                Abundance) %>% 
  distinct(index, 
           mixture, 
           .keep_all = TRUE) %>%
  group_by(mixture) %>%
  summarise(`Nr of IDs` = sum(!is.na(Abundance))) %>% 
  bind_rows(.,
            tibble(mixture = "In all three",
                   `Nr of IDs` = nrow(pept_matrix_nona)))

ids_summarypep <- mutate(ids_summarypep,
                       Mixture = case_when(mixture == "tmt_1" ~ "Mix_1",
                                           mixture == "tmt_2" ~ "Mix_2",
                                           mixture == "tmt_3" ~ "Mix_3",
                                           mixture == "In all three" ~ "Quant. in all",
                                           mixture == "Overall" ~ "Overall",
                                           mixture == "Quant_2/3_mixtures" ~ "Quant. in 2/3")) %>%
  mutate(Mixture = factor(Mixture, 
                          levels = c("Overall", 
                                     "Quant. in all",
                                     "Mix_3", 
                                     "Mix_2", 
                                     "Mix_1")))
```

```{r warning=FALSE, message=FALSE}
barplot_pept_cover <- ggplot(data = ids_summarypep,
                             aes(y = `Nr of IDs`, 
                                 x = Mixture)) +
                        geom_col(fill = "#008683") + 
                        geom_text(size = 5, 
                                  position = position_stack(vjust = 0.5), 
                                  aes(label = `Nr of IDs`)) +
                        coord_cartesian(ylim = c(0, 
                                                 5000))+
                        coord_flip() +
                        labs(title = "Number of Identified and quantified Peptides by Mixture") +
                        ylab("Nr of IDed and Quant Peptides") + 
                        xlab("TMT Mixture") + 
                        theme(axis.text.x = element_text(hjust = 0.5, 
                                                         vjust = 0, 
                                                         size = 7, 
                                                         angle = 360),
                              axis.text.y = element_text(hjust = 0.95,
                                                         vjust = 0.2, 
                                                         size = 7),
                              panel.background = element_blank(),
                              panel.grid.major = element_blank(),
                              panel.border = element_rect(colour = "black", 
                                                          fill = NA, 
                                                          size = 0.5),
                              axis.title.x = element_blank(),
                              axis.title.y = element_blank(),
                              legend.text = element_text(size = 7),
                              legend.title = element_text(size = 8),
                              legend.key.height = unit(3, 'mm'),
                              legend.key.width = unit(3, 'mm'),
                              legend.position = "bottom")
```

```{r fig.height=4, fig.width=5.5, warning=FALSE}
print(barplot_pept_cover)
```

```{r}
ggsave(plot = barplot_pept_cover, 
       filename = here::here("figures/barplot_coverage_pept_proteomics_gbm.tiff"), 
       device = "tiff",
       units = "mm",
       width = 38,
       height = 50)

ggsave(plot = barplot_pept_cover, 
       filename = here::here("figures/barplot_coverage_pept_proteomics_gbm.eps"), 
       device = "eps",
       units = "mm",
       width = 38,
       height = 50)
```

# Annotate peptides with cleavage information  

In this section we annotate peptides by their specificity and cleavage information.

```{r}
if(!file.exists(here("data/semi_specific_search_fragpipe17/protein_combined.fas"))){
  source(here("scr/prepare_combined_fasta.R"))
}

fasta <- read.fasta(file = here("data/semi_specific_search_fragpipe17/protein_combined.fas"),
                    seqtype = "AA", 
                    as.string = TRUE)
```


```{r}
if(!file.exists(here("results/semi_tryptic/cleavage_annoated_peptides_final.tsv"))){
  
  cleavage_annoated_peptides <- annotate_peptides(expr_mat = peptide_ids_filtered, 
                                                  fasta = fasta,
                                                  decoy_tag = "rev_")
  
  write_tsv(cleavage_annoated_peptides,
            here("results/semi_tryptic/cleavage_annoated_peptides_final.tsv"))
  
} else {
  
  cleavage_annoated_peptides <- read_tsv(here("results/semi_tryptic/cleavage_annoated_peptides_final.tsv"))
  
}

cleavage_annoated_peptides <- dplyr::mutate(cleavage_annoated_peptides,
                                            Genes = protein_id)

peptides_annotated <- left_join(peptide_ids_filtered, 
                                cleavage_annoated_peptides,
                                by = c("Peptide", 
                                       "protein_id"))
```  

# Annotate N-terminal modifications of peptides

```{r echo=TRUE}
nterannot <- annotate_nterm(peptides_annotated,
                            tmtmass = 229.1629) %>%
  clean_names()
```

```{r}
exp_nterannot <- nterannot %>%
  mutate(ntercount = str_count(string = assigned_modifications, 
                               pattern = "N-term"))
```

## Merge peptide annotation with TMT integrator quant report  

```{r}
# all quantified peptides
tmt_reprt_annot <- left_join(tmt_peptdata_frag, 
                             nterannot) 

check_na <- filter(tmt_reprt_annot, 
                   is.na(semi_type))

excluded_tmt_reprt_annot <- anti_join(nterannot, 
                                      tmt_reprt_annot) %>% 
                    clean_names()

#only those present in all mixtures
tmt_peptdata_fragnona <- tmt_peptdata_frag %>%
  filter(peptide %in% pept_nona$peptide)

tmt_reprt_annotnona <- left_join(tmt_peptdata_fragnona, 
                                 nterannot) 
```

```{r echo=TRUE}
source(here("scr/summarize_peptide_counts.R"))
```

```{r echo=TRUE}
summary_count <- summarize_peptide_counts(tmt_reprt_annot) 
```

## Barplot  

These are the ones that would be used for inferential statistics.

```{r echo=TRUE}
to_count_info <- tmt_reprt_annot %>% 
   filter(index %in% pept_matrix_nona$index) %>%
                      dplyr::select(index, 
                                    specificity, 
                                    nterm, 
                                    semi_type, 
                                    tmt_tag,
                                    aa_after, 
                                    aa_before, 
                                    following_10_resid, 
                                    previous_10_resid, 
                                    start_position, 
                                    end_position) %>%
  mutate(specificity = if_else(str_detect(semi_type, 
                                          "unspecific"), 
                               true = "semi_specific",
                               false = specificity),
         duplicated = duplicated(index)) %>%
  distinct()
  
to_count_info_semi <- to_count_info %>%
                           dplyr::select(index,
                                         specificity) %>%
                           distinct() %>%
  mutate(duplicated = duplicated(index)) 

false_duplication <- to_count_info_semi %>%
  filter(duplicated) %>%
  pull(index)

to_count_info_semi <- to_count_info_semi %>%
  mutate(specificity = if_else(index %in% false_duplication, 
                               true = "semi_specific",
                               false = specificity)) %>%
  dplyr::select(-duplicated) %>%
  distinct()

  
  n_semi <- dplyr::count(to_count_info_semi, 
                         specificity) %>% 
                      dplyr::rename(feature_type = specificity) %>%
                      dplyr::mutate(category = "specificity")
  

  n_total <- tibble(feature_type = "Total",
                    n = length(unique(to_count_info$index)),
                    category = "Total")
  
  n_term <- dplyr::count(to_count_info, 
                         nterm) %>% 
                      dplyr::rename(feature_type = nterm) %>%
                      dplyr::mutate(category = "N-term")
  
  summary_count_pept_nona <- bind_rows(n_semi,
                                       n_term,
                                       n_total)


total_sumcount <- summary_count_pept_nona %>%
  filter(feature_type == "Total") %>%
  pull(n)

summary_countnona_no_tot <- summary_count_pept_nona %>%
  dplyr::filter(category != "Total") %>%
  dplyr::rename(`Feature category` = category)
```

```{r echo=FALSE, warning=FALSE}
summary_pept_annot <- ggplot(summary_countnona_no_tot,
                             aes(x = feature_type, 
                                 y = n, 
                                 fill = `Feature category`)) + 
        coord_flip()+ 
        geom_col() +
        geom_text(aes(label = n), 
                  hjust = -0.2, 
                  size = 2.5) + 
        scale_y_continuous(limits = c(0, 
                                      17000), 
                           breaks = c(0, 
                                      7000, 
                                      15000)) + 
        labs(y = "Number of IDs", 
             x = "Feature type") +
        facet_wrap(~`Feature category`, 
                   nrow = 1, 
                   scales = "free") +
        theme(axis.text.x = element_text(hjust = 0.5, 
                                         vjust = 0, 
                                         size = 7, 
                                         angle = 360),
              axis.text.y = element_text(hjust = 0.95, 
                                         vjust = 0.2, 
                                         size = 7),
              panel.background = element_blank(),
              panel.grid.major = element_blank(),
              panel.border = element_rect(colour = "black", 
                                          fill = NA, 
                                          size = 0.5),
              axis.title.x = element_blank(),
              axis.title.y = element_blank(),
              legend.text = element_text(size = 7),
              legend.title = element_text(size = 8),
              legend.key.height= unit(3, 'mm'),
              legend.key.width= unit(3, 'mm'),
              legend.position="bottom", 
              strip.background = element_blank(),
              strip.text = element_blank())
```

```{r fig.width=5, fig.height=2, warning=FALSE}
print(summary_pept_annot)
```  

```{r}
ggsave(plot = summary_pept_annot, 
       filename = here::here("figures/barplot_coverage_peptidesfeatures_gbm.tiff"), 
       device = "tiff",
       units = "mm",
       width = 76,
       height = 50)

ggsave(plot = summary_pept_annot, 
       filename = here::here("figures/barplot_coverage_peptidesfeatures_gbm.eps"), 
       device = "eps",
       units = "mm",
       width = 76,
       height = 50)
```

# Differential abundance analysis (DAA)

## Prep design matrix {.unnumbered .unlisted}

```{r}
paired_id <- sample_annotation2$paired_id
recurrence <- sample_annotation2$recurrence
patient <- sample_annotation2$patient
mixture <- sample_annotation2$mixture

paired_idwo6 <- sample_annotationwo6$paired_id
recurrencewo6 <- sample_annotationwo6$recurrence
patientwo6 <- sample_annotationwo6$patient
mixturewo6 <- sample_annotationwo6$mixture
```

```{r}
design_limmawo6 <- model.matrix(~ patientwo6 + recurrencewo6)

sample_annotationwo6 <- sample_annotationwo6 %>%
  mutate(paired_id_semi = paste(patient, 
                                recurrence, 
                                sep = ""))

rownames(design_limmawo6) <- sample_annotationwo6$paired_id_semi
```

## Prep abundance matrices {.unnumbered .unlisted}

```{r}
pep_matwo6 <- dplyr::select(pept_matrix_nonawop6,
                             index, rownames(design_limmawo6))  %>%
  column_to_rownames("index") %>%
  as.matrix()
```

```{r}
colnames(pep_matwo6)
```

```{r}
rownames(design_limmawo6)
```

The column names in our peptide abundance matrix have the same order as the row names in our design matrix.

## Fitting linear model {.unlisted .unnumbered}  

```{r echo=TRUE, warning=FALSE, message=FALSE}
fit_mod_peptwo6 <- fit_limmapeptwo6(pep_matwo6, 
                         design_limmawo6, 
                         method = 'robust', 
                         Limma = "Robust - w Patient effect") 

compar_tab_peptwo6 <-  fit_mod_peptwo6 %>%
                    separate(Protein, 
                             into = c("protein", 
                                      "peptide"), 
                             remove = FALSE) %>%
  dplyr::rename(index = Protein)
```

## Extract coefficients {.unlisted .unnumbered}   

```{r}
# load function for volcano plot
source(here("scr/plot_volcano.R"))
```

```{r}
features1 <- tmt_reprt_annotnona %>%
                    dplyr::select(peptide, index, specificity, nterm, 
                                  semi_type, is_terminal)

compar_tab_peptwo6_annn <- left_join(compar_tab_peptwo6,
                                     features1)

increased_recwo6_pept_annn <- compar_tab_peptwo6_annn %>%
                    filter(logFC > 0,
                           adj.P.Val < 0.05,
                           specificity == "semi_specific",
                           is_terminal == "not_terminal") %>% 
  pull(peptide)

decreased_recwo6_pept_annn <- compar_tab_peptwo6_annn %>%
                    filter(logFC < 0,
                           adj.P.Val < 0.05,
                           specificity == "semi_specific",
                           is_terminal == "not_terminal") %>% 
  pull(peptide)
```

## Volcano plot  

```{r}
recwo6_pept22 <- compar_tab_peptwo6_annn %>%
  filter(adj.P.Val < 0.05,
         specificity == "semi_specific",
         is_terminal == "not_terminal")

recwo6_pept_no <- compar_tab_peptwo6_annn %>%
  filter(adj.P.Val < 0.05,
         specificity == "specific",
         is_terminal == "not_terminal")

compar_tab_peptwo6_annn2 <- compar_tab_peptwo6_annn %>%
  dplyr::rename(Protein = protein) %>%
 mutate(Feature = case_when(adj.P.Val < 0.05 & logFC > 0 & specificity == "semi_specific" & is_terminal == "not_terminal" ~ "Up-regulated Semi-tryptic",
                            adj.P.Val < 0.05 & logFC < 0 & specificity == "semi_specific" & is_terminal == "not_terminal" ~ "Down-regulated Semi-tryptic",
                            adj.P.Val < 0.05 & specificity == "specific" ~ "Tryptic",
                            TRUE ~ "No change")) %>%
 mutate(Feature = factor(Feature, 
                         levels = c("Up-regulated Semi-tryptic", 
                                    "Down-regulated Semi-tryptic",
                                    "No change",
                                    "Tryptic"))) %>%
  left_join(.,prot2gene)

gpnbm_pept_semi_lim <- compar_tab_peptwo6_annn2 %>%
  filter(Gene == "GPNMB")

diff_abund_semi <- compar_tab_peptwo6_annn2 %>% 
  filter(Feature %in% c("Up-regulated Semi-tryptic" , 
                        "Down-regulated Semi-tryptic"))

size <- 0.5

volcano_semi_gbm <- ggplot(data = compar_tab_peptwo6_annn2,
                      mapping = aes(x = logFC, 
                                    y = -log10(adj.P.Val),
                                    color = Feature)) + 
      geom_point(data = filter(compar_tab_peptwo6_annn2,
                               !Feature %in% c("Up-regulated Semi-tryptic" , 
                                               "Down-regulated Semi-tryptic")),
                 size = size) +
      geom_point(data = filter(compar_tab_peptwo6_annn2, 
                               Feature %in% c("Up-regulated Semi-tryptic" , 
                                              "Down-regulated Semi-tryptic")),
                 size = 1) + 
      scale_color_manual(values = c("Up-regulated Semi-tryptic" = "#ff6150",
                                    "Down-regulated Semi-tryptic" = "#54d2d2",
                                    "Tryptic" = "grey",
                                    "No change" = "darkgrey"
                                    )) +            
      geom_hline(yintercept = -log10(0.05),
                 color = "red", linetype = "dashed") +
     theme(strip.text = element_text(vjust = 1))
```

```{r fig.width=5.5, fig.height=4, warning=FALSE}
print(volcano_semi_gbm)
```

```{r}
ggsave(plot = volcano_semi_gbm, 
       filename = here::here("figures/volcano_proteolysis_gbm_2.tiff"), 
       device = "tiff",
       units = "mm",
       width = 63,
       height = 63)

ggsave(plot = volcano_semi_gbm, 
       filename = here::here("figures/volcano_proteolysis_gbm_2.eps"), 
       device = "eps",
       units = "mm",
       width = 63,
       height = 63)
```

```{r}
# supplementary results table for proteolysis results
summary_semi_limma <- compar_tab_peptwo6_annn2 %>% 
  filter(Feature %in% c("Up-regulated Semi-tryptic" , 
                        "Down-regulated Semi-tryptic",
                        "No change"))

write_tsv(x = summary_semi_limma,
          file = here::here("results/semi_tryptic/summary_proteolytic_processing_limma_results.tsv"))
```

# Checking specific hits  

## GPNMB - distribution of abundances for semi-specific peptides   

We identified a group of differentially abundant semi-specific peptides from GPNMB.

```{r}
pept_quant_annotated2 <- pept_quant_annotated %>%
  separate(col = index,
           into = c("Protein", 
                    "peptide"))

quant_anpeptwgene <- left_join(pept_quant_annotated2, 
                               prot2gene) 

tab_2_peptpaired_boxplot <-  quant_anpeptwgene %>%
  filter(Protein %in% "Q14956") 

gpmnb_pept_2annnot <- tab_2_peptpaired_boxplot %>%
  dplyr::select(Peptide = peptide,
                Genes = Protein) %>% 
  distinct()
  
# prep data
slim_datap <- pivot_longer(pept_matrix, 
                           cols = 2:length(names(pept_matrix)), 
                           names_to = c("patient","condition"),
                           values_to = "Intensity",
                           names_sep = "\\_") %>% 
  mutate(condition = case_when(str_detect(patient, "rec") ~ "rec",
                               str_detect(patient, "prim") ~ "prim"),
         patient = paste0("x",parse_number(patient))) %>%
  filter(str_detect(patient, "x6", negate = TRUE)) %>% 
  separate(col = index,
           into = c("Protein", "peptide"), 
           sep = "_") %>%
  left_join(.,sample_annotation2) %>%
    filter(Protein %in% "Q14956") 
  
slim_datap2 <- pivot_wider(slim_datap, 
                           values_from = Intensity, 
                            names_from = condition) 

slim_datap3 <- slim_datap2 %>% 
  mutate(Abs_diff = rec-prim) %>%
  mutate(rank = row_number(Abs_diff)) %>% 
  dplyr::rename(Initial = prim, Recurrent = rec) 
```

```{r}
source(here("scr/annotate_peptides.R"))
```

```{r}
annotated_gpnmb_peptides <- annotate_peptides(gpmnb_pept_2annnot,
                                              fasta = fasta) %>%
  dplyr::select(-previous_all_resid) %>% 
  filter(specificity == "semi_specific")

slim_datap4 <- slim_datap3 %>%
  dplyr::filter(peptide %in% annotated_gpnmb_peptides$Peptide)
```  

```{r}
gpnmb_semis <- ggpaired(slim_datap4,
                        cond1 = "Initial",
                        cond2 = "Recurrent", 
                        fill = "condition",
                        ylab = "Normalized Abundance",
                        label = NULL,
                        repel = TRUE,
                        facet.by = "peptide",
                        point.size = 0.2, 
                        line.size = 0.1, 
                        line.color = "mixture") +
      theme(axis.text.x = element_text(hjust = 0.5, 
                                       vjust = 0, 
                                       size = 7, 
                                       angle = 360),
            axis.text.y = element_text(hjust = 0.95, 
                                       vjust = 0.2, 
                                       size = 7),
            panel.background = element_blank(),
            panel.grid.major = element_blank(),
            panel.border = element_rect(colour = "black", 
                                        fill = NA, 
                                        size = 0.5),
            axis.title = element_text(size = 7),
            legend.text = element_text(size = 7),
            legend.title = element_text(size = 7),
            legend.key.height= unit(6, 'mm'),
            legend.key.width= unit(6, 'mm'),
            legend.position="bottom",
            strip.text = element_text(hjust = 0.5, 
                                      vjust = 0, 
                                      size = 7, 
                                      angle = 360)) 
```

```{r fig.width=8, fig.height=6.5}
print(gpnmb_semis)
```

```{r}
ggsave(plot = gpnmb_semis, 
       filename = here::here("figures/gpnmb_proteolysis_gbm_boxplots.tiff"), 
       device = "tiff",
       units = "mm",
       width = 190,
       height = 180)

ggsave(plot = gpnmb_semis, 
       filename = here::here("figures/gpnmb_proteolysis_gbm_boxplots.eps"), 
       device = "eps",
       units = "mm",
       width = 190,
       height = 180)
```

## Coverage of GBPNMB   

```{r}
source(here("scr/protein_peptide_coverage_plot.R"))
```

```{r}
peptides_GPNMB <- cleavage_annoated_peptides %>% 
  filter(protein_id %in% "Q14956") %>%
  mutate(peptide_length = str_length(string = Peptide))
```  

```{r}
feat_gpnmb <- drawProteins::get_features("Q14956")

feat_gpnmbdf <- drawProteins::feature_to_dataframe(feat_gpnmb)
#Get peptides as coverage features for plotting

cov_feat_gpnmbdf <- get_coverage(annotated_peptides = peptides_GPNMB, 
                                 id = "Q14956")

# get fold-changes of peptides to plot for coverage
fcs_cov_gpnmbdf <- compar_tab_peptwo6_annn2 %>%
  filter(peptide %in% cov_feat_gpnmbdf$description) %>%
  dplyr::select(description = peptide, logFC) 

cov_feat_gpnmbdf2 <- left_join(cov_feat_gpnmbdf, 
                               fcs_cov_gpnmbdf)


#Merge coverage feature info with protein sequence features info:

fullfeat_gpnmb <- add_peptides(feat_gpnmbdf,
                               peptide_coverage_data = cov_feat_gpnmbdf)
# drawCanvas
canvas <- draw_canvas(fullfeat_gpnmb)

# draw the protein chain
wchain <- draw_chains(canvas, 
                      fullfeat_gpnmb)

# draw protein domains
wdomainsgpnmb <- draw_domains(wchain, 
                              data = fullfeat_gpnmb)
cov_feat_gpnmbdf$order <- 1.4

pepcov_gpnmbdf <- wchain + 
  ggplot2::geom_rect(data = cov_feat_gpnmbdf2,
                         mapping=ggplot2::aes(xmin=begin,
                                              xmax=end,
                                              ymin=order-0.05,
                                              ymax=order+0.05,
                                              fill = logFC)) +
  scale_fill_gradient(low = "#2C9C8E",
                      high = "#FC0000") +
    annotate("text", x = -50, y = 1.4, label = "Peptides") +
    theme_bw(base_size = 12) + # white background
    theme(panel.grid.minor=element_blank(),
          panel.grid.major=element_blank()) +
    theme(axis.ticks = element_blank(),
          axis.text.y = element_blank()) +
    theme(panel.border = element_blank(),
          legend.position = "bottom")
```

```{r warning=FALSE}
pepcov_gpnmbdf
```

```{r}
ggsave(plot = pepcov_gpnmbdf, 
       filename = here::here("figures/gpnmbdf_coverage_proteomics_gbm.tiff"), 
       device = "tiff",
       units = "mm",
       width = 150,
       height = 100)

ggsave(plot = pepcov_gpnmbdf, 
       filename = here::here("figures/gpnmbdf_coverage_proteomics_gbm.eps"), 
       device = "eps",
       units = "mm",
       width = 150,
       height = 100)
```


## GFAP - distribution of abundances for semi-specific peptides   

We identified a group of differentially abundant semi-specific peptides from GPNMB.

```{r}
tab_2_peptpaired_gfap_boxplot <-  quant_anpeptwgene %>%
  filter(Gene %in% "GFAP") 

gfap_pept_2annnot <- tab_2_peptpaired_gfap_boxplot %>%
  dplyr::select(Peptide = peptide,
                Genes = Protein) %>% 
  distinct()
  
# prep data
slim_datap_gfap <- pivot_longer(pept_matrix, 
                           cols = 2:length(names(pept_matrix)), 
                           names_to = c("patient","condition"),
                           values_to = "Intensity",
                           names_sep = "\\_") %>% 
  mutate(condition = case_when(str_detect(patient, "rec") ~ "rec",
                               str_detect(patient, "prim") ~ "prim"),
         patient = paste0("x",parse_number(patient))) %>%
  filter(str_detect(patient, "x6", negate = TRUE)) %>% 
  separate(col = index,
           into = c("Protein", "peptide"), 
           sep = "_") %>%
  left_join(.,sample_annotation2) %>%
      filter(Protein %in% "P14136") 
  
slim_datap_gfap <- pivot_wider(slim_datap_gfap, 
                           values_from = Intensity, 
                            names_from = condition) 

slim_datap_gfap3 <- slim_datap_gfap %>% 
  mutate(Abs_diff = rec-prim) %>%
  mutate(rank = row_number(Abs_diff)) %>% 
  dplyr::rename(Initial = prim, Recurrent = rec) 
```


```{r}
annotated_gfap_peptides <- annotate_peptides(gfap_pept_2annnot,
                                              fasta = fasta) %>%
  dplyr::select(-previous_all_resid) %>% 
  filter(specificity == "semi_specific")

slim_datap_gfap4 <- slim_datap_gfap3 %>%
  dplyr::filter(peptide %in% unique(annotated_gfap_peptides$Peptide))
```  

```{r}
gfap_semis <- ggpaired(slim_datap_gfap4,
                        cond1 = "Initial",
                        cond2 = "Recurrent", 
                        fill = "condition",
                        ylab = "Normalized Abundance",
                        label = NULL,
                        repel = TRUE,
                        facet.by = "peptide",
                        point.size = 0.2, 
                        line.size = 0.1, 
                        line.color = "mixture") +
      theme(axis.text.x = element_text(hjust = 0.5, 
                                       vjust = 0, 
                                       size = 7, 
                                       angle = 360),
            axis.text.y = element_text(hjust = 0.95, 
                                       vjust = 0.2, 
                                       size = 7),
            panel.background = element_blank(),
            panel.grid.major = element_blank(),
            panel.border = element_rect(colour = "black", 
                                        fill = NA, 
                                        size = 0.5),
            axis.title = element_text(size = 7),
            legend.text = element_text(size = 7),
            legend.title = element_text(size = 7),
            legend.key.height= unit(6, 'mm'),
            legend.key.width= unit(6, 'mm'),
            legend.position="bottom",
            strip.text = element_text(hjust = 0.5, 
                                      vjust = 0, 
                                      size = 7, 
                                      angle = 360)) 
```

```{r fig.width=8, fig.height=6.5}
print(gfap_semis)
```

## Coverage of GFAP   

```{r}
source(here("scr/protein_peptide_coverage_plot.R"))
```

```{r}
peptides_GFAP <- cleavage_annoated_peptides %>% 
  filter(protein_id %in% "P14136",
         specificity == "semi_specific") %>%
  mutate(peptide_length = str_length(string = Peptide))
```  

```{r}
feat_GFAP <- drawProteins::get_features("P14136")

feat_GFAPf <- drawProteins::feature_to_dataframe(feat_GFAP)
#Get peptides as coverage features for plotting

cov_feat_GFAPf <- get_coverage(annotated_peptides = peptides_GFAP, 
                                 id = "P14136")

# get fold-changes of peptides to plot for coverage
fcs_cov_GFAPf <- compar_tab_peptwo6_annn2 %>%
  filter(peptide %in% cov_feat_GFAPf$description) %>%
  dplyr::select(description = peptide, logFC) 

cov_feat_GFAP2 <- left_join(cov_feat_GFAPf, 
                            fcs_cov_GFAPf) 


#Merge coverage feature info with protein sequence features info:

fullfeat_GFAP <- add_peptides(feat_GFAPf,
                              peptide_coverage_data = cov_feat_GFAPf)
# drawCanvas
canvas <- draw_canvas(fullfeat_GFAP)

# draw the protein chain
wchain <- draw_chains(canvas, 
                      fullfeat_GFAP)

# draw protein domains
wdomainsgfap <- draw_domains(wchain, 
                             data = fullfeat_GFAP)

cov_feat_GFAP2$order <- 1.4

pepcov_GFAP <- wchain + 
  ggplot2::geom_rect(data = cov_feat_GFAP2,
                         mapping=ggplot2::aes(xmin=begin,
                                              xmax=end,
                                              ymin=order-0.05,
                                              ymax=order+0.05,
                                              fill = logFC)) +
  scale_fill_gradient(low = "#2C9C8E",
                      high = "#FC0000") +
    annotate("text", x = -50, y = 1.4, label = "Peptides") +
    theme_bw(base_size = 12) + # white background
    theme(panel.grid.minor=element_blank(),
          panel.grid.major=element_blank()) +
    theme(axis.ticks = element_blank(),
          axis.text.y = element_blank()) +
    theme(panel.border = element_blank(),
          legend.position = "bottom")
```

```{r warning=FALSE}
pepcov_GFAP
```

```{r}
ggsave(plot = pepcov_GFAP, 
       filename = here::here("figures/gfap_coverage_proteomics_gbm.tiff"), 
       device = "tiff",
       units = "mm",
       width = 150,
       height = 100)

ggsave(plot = pepcov_GFAP, 
       filename = here::here("figures/gfap_coverage_proteomics_gbm.eps"), 
       device = "eps",
       units = "mm",
       width = 150,
       height = 100)
```


# Proportional abundance of proteolytic peptides  

__Wrangle data__

```{r}
pept_semi_annot <- peptides_annotated %>%
  dplyr::select(Peptide, 
                specificity, 
                is_terminal) 

pept_quant_to_summary <- pept_quant_annotated %>%
  separate(col = index, 
           into = c("Protein", "Peptide"), 
           sep = "\\_", 
           remove = FALSE) %>%
  left_join(.,pept_semi_annot)

pep_quant_presummary <- pept_quant_to_summary %>%
  dplyr::select(Protein, 
                Peptide, 
                recurrence, 
                paired_id, 
                Abundance, 
                specificity, 
                is_terminal) 
```  

__Prepare data-frame with abudance percentage of semi-specific peptides per sample__

```{r}
pept_summary_int_all <- pep_quant_presummary %>%
  group_by(paired_id, 
           recurrence) %>%
  summarise(Sum_All = sum(Abundance, 
                          na.rm = TRUE))

pept_summary_int_semi <- pep_quant_presummary %>%
  filter(specificity == "semi_specific",
         is_terminal == "not_terminal") %>%
  group_by(paired_id, 
           recurrence) %>%
  summarise(Sum_Semi = sum(Abundance, 
                           na.rm = TRUE))

pept_sum_summary <- left_join(pept_summary_int_all, 
                              pept_summary_int_semi) %>%
  mutate(Percentage = Sum_Semi/Sum_All * 100,
         Stage = if_else(recurrence == "prim",
                         true = "Initial",
                         false = "Recurrence"))
```  

## Plot of % of abundance of semi-specific peptides  

```{r}
plotSumEM <- ggplot(pept_sum_summary, 
                    aes(x = Stage, 
                        y = Percentage, 
                        fill = Stage, 
                        cex.axis = 1.5)) +
  geom_boxplot() +
  geom_dotplot(binaxis = "y", 
               stackdir = "center", 
               dotsize = 0.5) +
  # Box plot with jittered points
  # 0.2 : degree of jitter in x direction
  ylab("Proportional intensity of semi-tryptic peptides [%]") +
  geom_signif(comparisons = list(c("Initial",
                                   "Recurrence")),
              map_signif_level = TRUE) + 
  stat_compare_means(method = "t.test") +
  theme(axis.text.x = element_text(hjust = 0.5, 
                                   vjust = 0, 
                                   size = 6, 
                                   angle = 360),
        axis.text.y = element_text(hjust = 0.95, 
                                   vjust = 0.2, 
                                   size = 8),
        panel.background = element_blank(),
        panel.grid.major = element_blank(),
        panel.border = element_rect(colour = "black", 
                                    fill = NA, 
                                    size = 0.5),
        axis.title = element_text(size = 8),
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 8),
        legend.key.height = unit(3, 'mm'),
        legend.key.width = unit(3, 'mm'),
        legend.position ="bottom") 
  
```

```{r warning=FALSE}
print(plotSumEM)
```

```{r}
ggsave(plot = plotSumEM, 
       filename = here::here("figures/box_perc_semispec_pepts.tiff"), 
       device = "tiff",
       units = "mm",
       width = 40,
       height = 50)

ggsave(plot = plotSumEM, 
       filename = here::here("figures/box_perc_semispec_pepts.eps"), 
       device = "eps",
       units = "mm",
       width = 40,
       height = 50)
```  

## Comparative analysis of semi-specific peptides vs protein abundance  

### Get log2FC Summary of abundances of semi-specific peptides {.unnumbered .unlisted}

```{r}
#taking output from limma semi-specific
log2_semi_tryptic <- dplyr::select(compar_tab_peptwo6_annn,
                                   logFC, 
                                   protein, 
                                   peptide, 
                                   specificity, 
                                   is_terminal) %>%
  filter(specificity == "semi_specific",
         is_terminal == "not_terminal") %>%
  dplyr::rename(logFC_semi_peptide = logFC) %>%
  dplyr::select(-c(specificity, 
                   is_terminal))
```  

### Get log2 Summary of protein abundances based only on fully-tryptic peptides {.unnumbered .unlisted}

```{r}
med_prot_quant_specific <- pep_quant_presummary %>%
  group_by(Protein, 
           paired_id) %>%
  summarise(`median(Abundance)` = median(Abundance, 
                                         na.rm = TRUE)) %>%
  ungroup()
```

```{r}
proteins2exclude <- sel_proteins_missing(quant_annotated,
                                         threshold = 1)
```

```{r}
# prep wide matrix for median proteins abundances (arousing only from fully-tryptic peptides)
wide_premat_prot_only_tryp <- med_prot_quant_specific %>%
  pivot_wider(id_cols = c("Protein"),
              values_from = `median(Abundance)`, 
              names_from = paired_id) %>%
  # keep only proteins present in 2 / 3 of the samples
  filter(!Protein %in% proteins2exclude) 

mat_prot_only_tryp <- wide_premat_prot_only_tryp %>%
  column_to_rownames("Protein") %>%
  as.matrix()
```

### Run limma on this new data to generate log2 FCs of proteins from only fully-tryptic peptides {.unnumbered .unlisted}

__missForest-based imputation__

```{r}
t_mat_prot_only_tryp <- t(mat_prot_only_tryp)

if(!file.exists(here("rds/missforest_imp_mat_prot_only_tryp.Rds"))){
  
 imp_prot_only_tryp <- missForest::missForest(t_mat_prot_only_tryp)
 t_mat_imp_prot_only_tryp <- imp_prot_only_tryp$ximp
 
 mat_prot_only_tryp <- t(t_mat_prot_only_tryp)
 
 saveRDS(imp_prot_only_tryp,
         file = here("rds/missforest_imp_mat_prot_only_tryp.Rds"))
 
} else {
  
 imp_prot_only_tryp <- readRDS(here("rds/missforest_imp_mat_prot_only_tryp.Rds"))
 t_mat_imp_prot_only_tryp <- imp_prot_only_tryp$ximp
 
 mat_imp_prot_only_tryp <- t(t_mat_imp_prot_only_tryp)
  
}
```

```{r}
split <- str_split_fixed(colnames(mat_imp_prot_only_tryp), pattern = "\\_", n = 2)

patient_tryp <- split[,1]
recurrence <- split[,2]

design_tryp <- model.matrix(~patient_tryp+recurrence)

rownames(design_tryp) <- colnames(mat_imp_prot_only_tryp)
```

```{r}
rownames(design_tryp) 
```

```{r}
colnames(mat_prot_only_tryp)
```

```{r warning=FALSE}
limma_tab_wo6tryp <- fit_limmawo6_tryp(mat_imp_prot_only_tryp, 
                         design_tryp, 
                         method = 'robust', 
                         Limma = "Robust - Proteins w only tryptic peptides",
                         prot2gene = prot2gene)

```

```{r}
log2_fully_tryptic <- dplyr::select(limma_tab_wo6tryp,
                                   logFC, 
                                   Protein, 
                                   Gene) %>%
  dplyr::rename(logFC_fully_tryp_protein = logFC) 
```

### Merge log2FCs of semi-tryptic peptides vs proteins with fully tryptic peptides {.unnumbered .unlisted}

```{r warning=FALSE}
expr_matrix2 <- expr_matrix %>%
  dplyr::select(Protein, sample_annotation2$paired_id) 

expr_matrix_filt <- expr_matrix2 %>%
  filter(!Protein %in% proteins2exclude)

mat_filt <- expr_matrix_filt %>%
  column_to_rownames("Protein") %>%
  as.matrix()

t_mat_filt <- t(mat_filt)

if(!file.exists(here("rds/missforest_imp_mat_filt.Rds"))){
  
 t_imp_mat_filt <- missForest::missForest(t_mat_filt)
 t_imp_filt_mat <- t_imp_mat_filt$ximp
 
 mat_filt_imp <- t(t_imp_filt_mat)
 
 saveRDS(t_imp_mat_filt,
         file = here("rds/missforest_imp_mat_filt.Rds"))
 
} else {
  
 t_imp_mat_filt <- readRDS(here("rds/missforest_imp_mat_filt.Rds"))
 t_imp_filt_mat <- t_imp_mat_filt$ximp
 
 mat_filt_imp <- t(t_imp_filt_mat)
  
}

mat_filt_impwo6 <- as.data.frame(mat_filt_imp) %>%
  rownames_to_column("Protein") %>%
  dplyr::select(-starts_with("x6")) %>%
  column_to_rownames("Protein") %>%
  as.matrix()

source(here("scr/fit_limmawo6.R"))

# fit limma
limma_tab_wo6 <- fit_limmawo6(mat_filt_impwo6, 
                         design_limmawo6, 
                         method = 'robust', 
                         Limma = "Robust - w Patient effect",
                         prot2gene = prot2gene)

#get proteins increased in recurrence
increased_in_rec <- limma_tab_wo6 %>%
  filter(logFC > 0,
         adj.P.Val < 0.05) %>%
  pull(Protein)

#get proteins decreased in recurrence
decreased_in_rec <- limma_tab_wo6 %>%
  filter(logFC < 0,
         adj.P.Val < 0.05) %>%
  pull(Protein)

tab_sig_prots_tryptic <- bind_rows(tibble(protein = increased_in_rec,
                                   characteristic = "up-regulated"),
                           tibble(protein = decreased_in_rec,
                                  characteristic = "down-regulated"))

```

```{r}
log2semipept2_log2protein_spec <- left_join(log2_fully_tryptic, 
                                            log2_semi_tryptic)# %>%
  na.omit() %>%
  mutate(DA_Protein = if_else(Protein %in% tab_sig_prots_tryptic$protein,
                              true = TRUE,
                              false = FALSE),
         DA_peptide = if_else(peptide %in% recwo6_pept22$peptide,
                              true = TRUE,
                              false = FALSE))
```

### log2FC Proteins vs Semi-tryp peptides (scatter plot)  

```{r}
check_increased_pept <- cleavage_annoated_peptides %>%
  filter(Peptide %in% increased_recwo6_pept)
```


```{r}
inter_scater <- log2semipept2_log2protein_spec %>%
  filter(Protein %in% check_increased_pept$protein_id)

inter_scater$Gene[duplicated(inter_scater$Gene)] <- NA

scatter_proteolysis_plot <- ggplot(log2semipept2_log2protein_spec, 
                                   aes(x = logFC_fully_tryp_protein, 
                                       y = logFC_semi_peptide)) + 
  geom_smooth(method = lm, 
              se = FALSE, 
              linetype = "dashed", 
              size = 0.5, 
              color = "black") + 
  geom_point(aes(color = DA_Protein, 
                 shape = DA_peptide), 
             size = 0.6) +
  scale_color_manual(values = c("#2a9d8f", 
                                "red")) +
  xlab("log2(FC) - Protein abundances") + 
  ylab("log2(FC) - Semi-specific peptides") + 
  ggrepel::geom_text_repel(data = inter_scater,
                           aes(label = Gene), 
                           size = 1,
                           box.padding = 0.5,
                           max.overlaps = 25) +
  theme(axis.text.x = element_text(hjust = 0.5, 
                                   vjust = 0, 
                                   size = 8, 
                                   angle = 360),
        axis.text.y = element_text(hjust = 0.95, 
                                   vjust = 0.2, 
                                   size = 8),
        panel.background = element_blank(),
        panel.grid.major = element_blank(),
        panel.border = element_rect(colour = "black", 
                                    fill = NA, 
                                    size = 0.5),
        axis.title = element_text(size = 8),
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 8),
        legend.key.height= unit(3, 'mm'),
        legend.key.width= unit(3, 'mm'),
        legend.position="bottom") 
```

```{r}
cor.test(log2semipept2_log2protein_spec$logFC_fully_tryp_protein,
    log2semipept2_log2protein_spec$logFC_semi_peptide, 
    method = "pearson")
```


```{r}
ggsave(plot = scatter_proteolysis_plot, 
       filename = here::here("figures/scatter_proteolysis_plot_gbm.tiff"), 
       device = "tiff",
       units = "mm",
       width = 63,
       height = 63)

ggsave(plot = scatter_proteolysis_plot, 
       filename = here::here("figures/scatter_proteolysis_plot_gbm.eps"), 
       device = "eps",
       units = "mm",
       width = 63,
       height = 63)
```

# Analysis of differential amino acid usage  

```{r}
source(here("scr/get_cleavage_area.R"))
```

```{r}
cleave_areas <- get_cleave_area(cleavage_annoated_peptides)
```

```{r}
library(dagLogo)
```

Used the identified protein sequences as background proteome.

```{r}
proteome_ided <- prepareProteome(fasta = here("data/semi_specific_search_fragpipe17/protein_combined.fas"), 
                                 species = "Homo sapiens")
```

```{r}
increased_Rec <- filter(cleave_areas$cleave_area20,
                            Peptide %in% increased_recwo6_pept) 

decreased_Rec <- filter(cleave_areas$cleave_area20,
                            Peptide %in% decreased_recwo6_pept)

write_tsv(x = increased_Rec,
          file = here("results/semi_tryptic/proteolytic_products_increased_in_Recurrent.tsv"))

write_tsv(x = decreased_Rec,
          file = here("results/semi_tryptic/proteolytic_products_increased_in_Recurrent.tsv"))


increased_Rec_4ice <- filter(cleave_areas$cleave_area20,
                            Peptide %in% increased_recwo6_pept) %>%
                    pull(cleave_area20)

decreased_Rec_4ice <- filter(cleave_areas$cleave_area20,
                            Peptide %in% decreased_recwo6_pept) %>%
                    pull(cleave_area20)
```

**Format peptide sequences**

```{r}
if(!file.exists(here("results/semi_tryptic/formated_pept_daglogo_increasedREC.rds"))){
  
  form_peptidesincreased_4ice <- formatSequence(increased_Rec_4ice, 
                                  proteome = proteome_ided)

  write_rds(form_peptidesincreased_4ice, file = here("results/semi_tryptic/formated_pept_daglogo_increasedREC.rds"))
} else {
  
  form_peptidesincreased_4ice <- read_rds(here("results/semi_tryptic/formated_pept_daglogo_increasedREC.rds"))
  
}
```

```{r}
if(!file.exists(here("results/semi_tryptic/formated_pept_daglogo_decreasedREC.rds"))){
  
  form_peptidesdecreased_4ice <- formatSequence(decreased_Rec_4ice, 
                                  proteome = proteome_ided)

  write_rds(form_peptidesdecreased_4ice, file = here("results/semi_tryptic/formated_pept_daglogo_decreasedREC.rds"))
} else {
  
  form_peptidesdecreased_4ice <- read_rds(here("results/semi_tryptic/formated_pept_daglogo_decreasedREC.rds"))
  
}
```

## DAU increased

```{r}
bg_mod_ztest_increased <- buildBackgroundModel(form_peptidesincreased_4ice,
                                           proteome = proteome_ided,
                           background = "wholeProteome",
                           testType = "ztest")
```

```{r}
dau_nogroup_increased <- testDAU(form_peptidesincreased_4ice, 
                           dagBackground = bg_mod_ztest_increased)
```

```{r}
dagHeatmap(dau_nogroup_increased) 
```

## DAU decreased

```{r}
bg_mod_ztest_decreased <- buildBackgroundModel(form_peptidesdecreased_4ice,
                                           proteome = proteome_ided,
                           background = "wholeProteome",
                           testType = "ztest")
```

```{r}
dau_nogroup_decreased <- testDAU(form_peptidesdecreased_4ice, 
                           dagBackground = bg_mod_ztest_decreased)
```

```{r}
dagHeatmap(dau_nogroup_decreased) 
```

# Heatmaps of positional abundance of amino acids of proteolytic products

```{r}
cleavage_area_list <- get_cleave_area(cleavage_annoated_peptides)
```

```{r}
increased <- compar_tab_peptwo6_annn %>%
                filter(logFC > 0,
                       adj.P.Val < 0.05,
                       specificity == "semi_specific",
                       is_terminal == "not_terminal") %>% 
                    pull(peptide)

decreased <- compar_tab_peptwo6_annn %>%
                filter(logFC < 0,
                       adj.P.Val < 0.05,
                       specificity == "semi_specific",
                       is_terminal == "not_terminal") %>% 
                    pull(peptide)

list_result <- list(output_limma = compar_tab_peptwo6_annn,
                    increased = increased,
                    decreased = decreased)
```


```{r}
prelogo <- prep_peptides(cleavage_area_list$cleave_area20)
```

## Increased Semi-specific peptides (TMT-labelled) (simple counts-no stats)

```{r}
order_of_aas <- read_csv(file = here::here("data/ordered_amino_acids.csv"))
```

```{r}
increased_pept_mat <- prelogo$form_peptidesincreased_4ice@peptides
```

```{r}
positions <- c(paste0("P",10:1),paste0("P",1:10,"'"))
```

```{r}
colnames(increased_pept_mat) <- positions
```

```{r}
increased_pept_mat_df <- increased_pept_mat %>%
                    as_tibble() 
```

```{r}
long_incr_ <- pivot_longer(increased_pept_mat_df,
                           cols = everything(),
                           names_to = "position",
                           values_to = "AA")

```

```{r}
count_incr <- long_incr_ %>%
                    dplyr::count(position, AA)
```

```{r}
wide_count_incr <- count_incr %>%
                    pivot_wider(id_cols = AA,
                                names_from = position,
                                values_from = n) %>%
                    dplyr::select(AA, all_of(positions)) %>%
                    dplyr::arrange(factor(AA, 
                                          levels = order_of_aas$...1))
```

```{r}
wide_count_incr_mat <- wide_count_incr %>%
                    dplyr::select(AA, paste0("P",5:1),paste0("P",1:5,"'")) %>%
                    column_to_rownames("AA") %>%
                    as.matrix()
```

```{r}
pheatmap::pheatmap(wide_count_incr_mat, 
                   cluster_rows = FALSE,
                   cluster_cols = FALSE,
                   main = "AA Counts - Increased Semi-specific pept in Recurrence")
```

```{r}
pheatmap::pheatmap(wide_count_incr_mat, 
                   cluster_rows = FALSE,
                   cluster_cols = FALSE)
```

# Heatmaps of positional abundance of amino acids of proteolytic products from GPNBM

```{r}
cleavage_annoated_peptides_gpnbm <- cleavage_annoated_peptides %>%
  filter(Peptide %in% gpmnb_pept_2annnot$Peptide)

cleavage_area_list_gpnbm <- get_cleave_area(cleavage_annoated_peptides_gpnbm)
```

```{r}
prelogo_gpnbm <- prep_peptides_min(cleavage_area_list_gpnbm$cleave_area20$cleave_area20, 
                                   proteome_ided = proteome_ided)
```

## Heatmap

```{r}
gpnbm_pept_mat <- prelogo_gpnbm$form_peptides_4ice@peptides
```

```{r}
positions <- c(paste0("P",10:1),
               paste0("P",1:10,"'"))
```

```{r}
colnames(gpnbm_pept_mat) <- positions
```

```{r}
gpnbm_pept_mat_df <- gpnbm_pept_mat %>%
                    as_tibble() 
```

```{r}
long_gpnbm_pept <- pivot_longer(gpnbm_pept_mat_df,
                           cols = everything(),
                           names_to = "position",
                           values_to = "AA")
```

```{r}
count_gpnbm_pept <- long_gpnbm_pept %>%
                    dplyr::count(position, AA)
```

```{r}
amino_acids_order <- data.frame(AA = order_of_aas$...1)

vect_aa_order <- amino_acids_order$AA
```

```{r}
wide_count_gpnbm <- count_gpnbm_pept %>%
                    pivot_wider(id_cols = AA,
                                names_from = position,
                                values_from = n) %>%
                    dplyr::select(AA, all_of(positions)) %>%
                    full_join(., amino_acids_order) %>%
                    dplyr::arrange(factor(AA, 
                                          levels = vect_aa_order))
```

```{r}
wide_count_mat <- wide_count_gpnbm %>%
                    dplyr::select(AA, paste0("P",5:1),paste0("P",1:5,"'")) %>%
                    column_to_rownames("AA") %>%
                    as.matrix()
```

```{r}
pheatmap::pheatmap(wide_count_mat, 
                   cluster_rows = FALSE,
                   cluster_cols = FALSE,
                   main = "AA Counts - Semi-specific peptides GPNBM")
```

```{r}
pheatmap::pheatmap(wide_count_incr_mat, 
                   cluster_rows = FALSE,
                   cluster_cols = FALSE)
```

# Heatmaps of positional abundance of amino acids of proteolytic products from GFAP

```{r}
gfap_semi_pepts <- diff_abund_semi %>% 
  filter(Gene == "GFAP") %>% 
  pull(peptide)

gfap_semi <- diff_abund_semi %>% 
  filter(Gene == "GFAP") 
```

```{r}
cleavage_annoated_peptides_gfap <- cleavage_annoated_peptides %>%
  filter(Peptide %in% gfap_semi_pepts)

cleavage_area_list_gfap <- get_cleave_area(cleavage_annoated_peptides_gfap)
```

```{r}
prelogo_gfap <- prep_peptides_min(cleavage_area_list_gfap$cleave_area20$cleave_area20, 
                                   proteome_ided = proteome_ided)
```

```{r}
gfap_semis_fcs_annt <- left_join(gfap_semi %>% dplyr::rename(Peptide = peptide),
                                 cleavage_area_list_gfap$cleave_area20)
```

## Heatmap

```{r}
gfap_pept_mat <- prelogo_gfap$form_peptides_4ice@peptides
```

```{r}
positions <- c(paste0("P",10:1),paste0("P",1:10,"'"))
```

```{r}
colnames(gfap_pept_mat) <- positions
```

```{r}
gfap_pept_mat_df <- gfap_pept_mat %>%
                    as_tibble() 
```

```{r}
long_gfap_pept <- pivot_longer(gfap_pept_mat_df,
                           cols = everything(),
                           names_to = "position",
                           values_to = "AA")
```

```{r}
count_gfap_pept <- long_gfap_pept %>%
                    dplyr::count(position, AA)
```

```{r}
wide_count_gfap <- count_gfap_pept %>%
                    pivot_wider(id_cols = AA,
                                names_from = position,
                                values_from = n) %>%
                    dplyr::select(AA, all_of(positions)) %>%
                    full_join(., amino_acids_order) %>%
                    dplyr::arrange(factor(AA, 
                                          levels = order_of_aas$...1))
```

```{r}
wide_count_mat <- wide_count_gfap %>%
                    dplyr::select(AA, paste0("P",5:1),paste0("P",1:5,"'")) %>%
                    column_to_rownames("AA") %>%
                    as.matrix()
```

```{r}
pheatmap::pheatmap(wide_count_mat, 
                   cluster_rows = FALSE,
                   cluster_cols = FALSE,
                   main = "AA Counts - Semi-specific peptides GFAP")
```

# Genearate Supplementary Table of Annotated Semi-specific peptides

This table would contain the list of differentially abundant semi-specific peptides with their respective annotation of extended cleavage sites. A different table will be added for the GPMBN peptides.

It will also contain the peptides identified as associated to GPMBN.

```{r}
cleavage_annoated_peptides_diffabund <- cleavage_annoated_peptides %>%
  filter(Peptide %in% diff_abund_semi$peptide)

cleavage_area_list_diffabund <- get_cleave_area(cleavage_annoated_peptides_diffabund)
```

```{r}
diffabund_semis_fcs_annt <- left_join(diff_abund_semi %>% dplyr::rename(Peptide = peptide),
                                 cleavage_area_list_diffabund$cleave_area20) %>%
  left_join(., cleavage_area_list_gpnbm$cleave_area20) %>%
  dplyr::select(-c(prev_10_pad,
                   following_10_pad,
                   len_20,
                   len_clearea,
                   len_follow,
                   len_prev,
                   len_followpad,
                   len_prevpad))
```

```{r}
write_tsv(x = diffabund_semis_fcs_annt,
          file = "suppl_tables/Supplementary_Table_3_differential_abundant_semispepecific_peptides.tsv")
```

```{r}
gpnbm_supp_table <- cleavage_area_list_gpnbm$cleave_area20 %>%
  dplyr::select(-c(prev_10_pad,
                   following_10_pad,
                   len_20,
                   len_clearea,
                   len_follow,
                   len_prev,
                   len_followpad,
                   len_prevpad))
```

```{r}
write_tsv(x = gpnbm_supp_table,
          file = "suppl_tables/Supplementary_Table_4_gpnbm_semispepecific_peptides.tsv")
```

